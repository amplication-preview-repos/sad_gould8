/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EntryService } from "../entry.service";
import { EntryCreateInput } from "./EntryCreateInput";
import { Entry } from "./Entry";
import { EntryFindManyArgs } from "./EntryFindManyArgs";
import { EntryWhereUniqueInput } from "./EntryWhereUniqueInput";
import { EntryUpdateInput } from "./EntryUpdateInput";

export class EntryControllerBase {
  constructor(protected readonly service: EntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Entry })
  async createEntry(@common.Body() data: EntryCreateInput): Promise<Entry> {
    return await this.service.createEntry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Entry] })
  @ApiNestedQuery(EntryFindManyArgs)
  async entries(@common.Req() request: Request): Promise<Entry[]> {
    const args = plainToClass(EntryFindManyArgs, request.query);
    return this.service.entries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Entry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async entry(
    @common.Param() params: EntryWhereUniqueInput
  ): Promise<Entry | null> {
    const result = await this.service.entry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Entry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEntry(
    @common.Param() params: EntryWhereUniqueInput,
    @common.Body() data: EntryUpdateInput
  ): Promise<Entry | null> {
    try {
      return await this.service.updateEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Entry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEntry(
    @common.Param() params: EntryWhereUniqueInput
  ): Promise<Entry | null> {
    try {
      return await this.service.deleteEntry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
